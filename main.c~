#include <stdlib.h>
#include <stdio.h>
#include "graphe.h"

int main(){
	struct grapheMA m,sauvegarde;
	FILE * f = NULL;
	f = fopen("fichier.txt","r+");
	int num= 5,sommet = 0,i=0;
	int *niveau = NULL;
	int * dist = NULL;
	lecture(&m,f);
	while(num!=0){
		printf("saisir un nombre.\n1 pour afficher le graphe\n3 pour appliquer l'algorithme DPS en ordre suffixe\n4 appliquer l'algorithme de DPS en ordrePrefixe\n5 pour appliquer Kosaraju\n6 pour trouver le chemin le plus court\n0 pour quitter\n");
		scanf("%d",&num);
		switch(num){
			case 0:
			break;
			case 1:
				makeFileDot(m);
				affichage(m);
			break;
			case 3:
				printf("sommet de départ :");
				scanf("%d",&sommet);
				printf("\n");
				DPS(m,sommet,FALSE);
			break;
			case 4:
				printf("sommet de départ :");
				scanf("%d",&sommet);
				printf("\n");
				DPS(m,sommet,TRUE);
			break;
			case 5:
			
				Kosaraju_sharir(m);
			break;
			case 6:
				printf("sommet de départ :");
				scanf("%d",&sommet);
				niveau=malloc(m.n*sizeof(int));
				printf("\n");
				if(tritopo(&m,niveau)){
					printf("nous utilisons Bellman car il y'a pas de cycle\n");
					dist = Bellman(&m,sommet,niveau);
				}else if(poidsPositif(m)){
					printf("nous utilisons Dijkstra car tous les poids sont positif\n");
					dist = Dijkstra(m,sommet);
				}else{
					printf("nous utilisons Bellman-Ford car les poids sont négatif et il y'a un cycle\n");
					dist = BellmanFord(&m,sommet);
				}
				sauvegarde = TableauTographe(m,dist);
				ecriture(sauvegarde);
				makeFileDot(sauvegarde);
				affichage(sauvegarde);
			default:
				printf("vous avez tapez une mauvaise commande \n");
			break;
		}
	}
	fclose(f);	
	return 0;
}
